# =============================================================================
# CONFIGURAÇÃO FUNCIONAL PARA LOGS MIKROTIK RB750GR3 (corrigida)
# =============================================================================

# ======================
# ENTRADA
# ======================
input {
  udp {
    host  => "0.0.0.0"
    port  => 514
    codec => "line"
    type => "mikrotik_firewall"
  }
}

# ======================
# FILTRO
# ======================
filter {
  # Verifica se a mensagem é do tipo syslog, que é como o MikroTik envia os logs
  if [type] == "syslog" {

    # Tenta extrair os campos principais do log de firewall do MikroTik
    # Este padrão procura por "proto=UDP," ou "proto TCP," e os IPs/portas
    grok {
      match => { 
        "message" => "proto(?:=)?%{WORD:protocol}, %{IPORHOST:source_ip}:%{POSINT:source_port}->%{IPORHOST:destination_ip}:%{POSINT:destination_port}" 
      }
      add_tag => "firewall_parsed_main"
    }

    # Se o padrão acima funcionou, extrai detalhes adicionais
    if "firewall_parsed_main" in [tags] {
      grok {
        match => { "message" => [
            "in:(?<interface>[^ ]+)",
            "src-mac (?<mac>%{COMMONMAC})",
            "\b(?<action>drop|reject|accept|jump)\b"
          ]
        }
      }
      
      # Cria os campos compostos "source" e "destination" que você usa nos alertas
      mutate {
        add_field => { "source" => "%{source_ip}:%{source_port}" }
        add_field => { "destination" => "%{destination_ip}:%{destination_port}" }
        
        # Cria um tópico dinâmico baseado na ação do firewall
        # Ex: firewall_drop, firewall_accept
        add_field => { "topic" => "firewall_%{action}" }
      }
    }

    # Adiciona uma regra específica para seus eventos de DNS
    if "dns_event" in [message] {
        mutate {
            # Se o log for de DNS, sobrescreve o tópico para "dns_event"
            replace => { "topic" => "dns_event" }
        }
    }

    # Limpa os campos intermediários que não são mais necessários
    mutate {
      remove_field => ["source_ip", "source_port", "destination_ip", "destination_port", "message"]
    }
  }
}

# ======================
# SAÍDAS
# ======================
output {
  # ---------- Elasticsearch ----------
  elasticsearch {
    hosts       => ["http://elasticsearch:9200"]
    index       => "mikrotik-firewall-%{+YYYY.MM.dd}"
    action      => "index"      # mais seguro que "create"
    data_stream => false        # boolean (sem aspas)
  }

  # ---------- Telegram: críticos ----------
  if [topic] in ["critical", "system", "error", "warning"] and [priority] == "critical" {
    http {
      url          => "http://telegram_bridge:8080/notify"
      http_method  => "post"
      format       => "json"
      mapping => {
        "@timestamp"   => "%{@timestamp}"
        "host"         => "%{[host][ip]}"
        "topic"        => "%{topic}"
        "severity"     => "%{severity}"
        "action"       => "%{action}"
        "message"      => "%{event_summary}"
        "priority"     => "%{priority}"
        "alert_type"   => "%{alert_type}"
        "event_details"=> "%{event_details}"
        "note"         => "Log %{topic} - %{severity}"
        "time_context" => "%{[time_context][period]}"
        "day_of_week"  => "%{[time_context][day_of_week]}"
      }
    }
  }

  # ---------- Telegram: DNS ----------
  if [topic] == "dns" and [priority] == "medium" {
    http {
      url          => "http://telegram_bridge:8080/notify"
      http_method  => "post"
      format       => "json"
      mapping => {
        "@timestamp"   => "%{@timestamp}"
        "host"         => "%{[host][ip]}"
        "topic"        => "dns_event"
        "severity"     => "%{severity}"
        "action"       => "%{action}"
        "message"      => "%{event_summary}"
        "priority"     => "%{priority}"
        "alert_type"   => "%{alert_type}"
        "dns_query"    => "%{dns_query}"
        "dns_client_ip"=> "%{dns_client_ip}"
        "note"         => "Evento DNS detectado"
        "time_context" => "%{[time_context][period]}"
        "day_of_week"  => "%{[time_context][day_of_week]}"
      }
    }
  }

  # ---------- Telegram: drops de firewall ----------
  if [type] == "mikrotik_firewall" and [topic] == "firewall" and [priority] == "high" and [action] == "Drop" and [alert_type] == "firewall_drop" and [interval_key] {
    http {
      url           => "http://telegram_bridge:8080/notify"
      http_method   => "post"
      content_type  => "application/json"
      format        => "json"
      mapping => {
        "@timestamp"   => "%{@timestamp}"
        "host"         => "%{[host][ip]}"
        "topic"        => "firewall_drop"
        "severity"     => "%{severity}"
        "action"       => "%{action}"
        "proto"        => "%{protocol}"
        "srcip"        => "%{src_ip}"
        "srcport"      => "%{src_port}"
        "dstip"        => "%{dst_ip}"
        "dstport"      => "%{dst_port}"
        "message"      => "%{event_summary}"
        "priority"     => "%{priority}"
        "alert_type"   => "%{alert_type}"
        "src_mac"      => "%{src_mac}"
        "in_interface" => "%{in_interface}"
        "interval_key" => "%{interval_key}"
        "note"         => "%{interval_note}"
      }
    }
  }
}